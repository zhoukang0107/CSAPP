2.2.2 无符号数的编码
    无符号数的编码就是其二进制
    B2U[w](x) = x[w-1]*2<w-1> + x[w-2]*2<w-2> + ... + x[2]*2<2> + x[1]*2<1> + x[0]*2<0>    注：2<w>表示2的w次方 下面一样 后续使用md


2.2.3 补码编码
    对于许多应用，我们还希望表示负数值。最常见的有符号数的计算机表示方式就是补码形式。在这个定义中，将字的最高有效位解释为负权(即符号位)。
我们用函数B2T[w].(Binary to Two's-complement的缩写，长度为w)来表示:
原理:补码编码的定义
    对向量x = {x[w-1],x[w-2],...,x[1],x[0]}x,-i ,  x二一2}:
    B2T[w](x) = -x[w-1]*2<w-1> + {x[w-2]*2<w-2> + ... + x[2]*2<2> + x[1]*2<1> + x[0]*2<0> }
最高有效位x[w-1]也称为符号位，它的“权重”为一2<w-1>(即负2的w-1次方)，是无符号表示中权重的负数。符号位被设置为1时，表示值为负，而当设置为0时，值为非负。
    我们可以看出B2T[w]是一个从长度为w的位模式到TMin[w]和TMax[w]之间数字的映射。同无符号表示一样，在可表示的取值范围内的每个数字都有一个唯一的w位的补
码编码。这就导出了与无符号数相似的补码数原理:
原理:补码编码的唯一性
    函数B2T[w]是一个双射。
我们定义函数B2T[w](即“补码到二进制”)作为B2T[w]的反函数。也就是说，对于每个数x，满足TMin[w]<=x<=TMax[w],则T2B[w](x)是x的(唯一的)w位模式。

有几点值得注意。
    第一，补码的范围是不对称的:|TMin|=|TMax|+1，也就是说，TMin没有与之对应的正数。之所以会有这样的不对称性，是因为一半的位模式(符号位设置为1的数)表示负数，
而另一半(符号位设置为0的数)表示非负数。因为0是非负数，也就意味着能表示的整数比负数少一个。
    第二，最大的无符号数值刚好比补码的最大值的两倍大一点:UMax[w]= 2TMax[w]+1, 补码表示中所有表示负数的位模式在无符号表示中都变成了正数。
    
    C语言标准并没有要求要用补码形式来表示有符号整数，但是几乎所有的机器都是这么做的。程序员如果希望代码具有最大可移植性，能够在所有可能的机器上运行，那么除
了上节图3所示的那些范围之外，我们不应该假设任何可表示的数值范围，也不应该假设有符号数会使用何种特殊的表示方式。另一方面，许多程序的书写都假设用补码来表示有
符号数，并且具有上节图1和上节图2所示的“典型的”取值范围，这些程序也能够在大量的机器和编译器上移植。C库中的文件<limits.h>定义了一组常量，来限定编译器运行的
这台机器的不同整型数据类型的取值范围。比如，它定义了常量INT_MAX、INT_MIN和UINT_MAX，它们描述了有符号和无符号整数的范围。对于一个补码的机器，数据类型int
有w位，这些常量就对应于TMax[w], TMin[w]和UIMax[w]的值。
    
    关于整数数据类型的取值范围和表示，Java标准是非常明确的。它要求采用补码表示，取值范围与上节图2中64位的情况一样。在Java中，单字节数据类型称为byte，而不是
char。这些非常具体的要求都是为了保证无论在什么机器上运行，Java程序都能表现地完全一样。


2.2.4 有符号数和无符号数之间的转换
    C语言允许在各种不同的数字数据类型之间做强制类型转换。
对于大多数C语言的实现，处理同样字长的有符号数和无符号数之间相互转换的一般规则是:数值可能会改变，但是位模式不变。

原理:补码转换为无符号数
对满足TMin[w]<=x<=TMax[w]的x有:
T2U[w](x) = x + 2<w>   x<0
          = x          x>=0

原理:无符号数转换为补码
对满足0<=u<=UMax[w]的u有:
U2T[w](x) = u           u<=TMax[w]
          = u - 2<w>    u>tTMax[w]

	
2.2.5 C语言中的有符号数与无符号数
    如上节图1和图2所示，C语言支持所有整型数据类型的有符号和无符号运算。尽管C语言标准没有指定有符号数要采用某种表示，但是几乎所有的机器都使用补码。通常，大多
数数字都默认为是有符号的。例如，当声明一个像12345或者Ox1A2B这样的常量时，这个值就被认为是有符号的。要创建一个无符号常量，必须加上后缀字符‘U’或者‘u'例如，
12345U或者Ox1A2Bu.
    C语言允许无符号数和有符号数之间的转换。虽然C标准没有精确规定应如何进行这种转换，但大多数系统遵循的原则是底层的位表示保持不变。因此，在一台采用补码的机器上，
当从无符号数转换为有符号数时，效果就是应用函数U2T[w]，而从有符号数转换为无符号数时，就是应用函数T2U[w].，其中w表示数据类型的位数。
    由于C语言对同时包含有符号和无符号数表达式的这种处理方式，出现了一些奇特的行为。当执行一个运算时，如果它的一个运算数是有符号的而另一个是无符号的，那么C语言
会隐式地将有符号参数强制类型转换为无符号数，并假设这两个数都是非负的，来执行这个运算。就像我们将要看到的，这种方法对于标准的算术运算来说并无多大差异，但是对于
像<和>这样的关系运算符来说，它会导致非直观的结果。


2.2.6 扩展一个数字的位表示
    一个常见的运算是在不同字长的整数之间转换，同时又保持数值不变。当然，当目标数据类型太小以至于不能表示想要的值时，这根本就是不可能的。然而，从一个较小的数据
类型转换到一个较大的类型，应该总是可能的。
    要将一个无符号数转换为一个更大的数据类型，我们只要简单地在表示的开头添加0.这种运算被称为零扩展(zero extension)，表示原理如下:
    原理:无符号数的零扩展
    定义宽度为w的位向量u = {u[w-1],u[w-2],...,u[1],u[o]} 和宽度为w‘的位向量u'={0,0,...,0,0,u[w-1],u[w-2],...,u[1],u[o]}，其中w'>w。
则B2U[w](u)=B2U[w'](u')。
    
    要将一个补码数字转换为一个更大的数据类型，可以执行一个符号扩展(sign exten-sion)，在表示中添加最高有效位的值，表示为如下原理。
    原理:补码数的符号扩展
    定义宽度为w的位向量x = {x[w-1],x[w-2],...,x[1],x[o]} 和宽度为w'的位向量x'={x[w-1],x[w-1],...,x[w-1],x[w-1],xu[w-2],...,x[1],x[o]}，
其中w' > w。则B2T[w](x) =B2T(w')[x']。

2.2.7 截断数字
    假设我们不用额外的位来扩展一个数值，而是减少表示一个数字的位数。
    当将一个w位的数x={x[w-1],x[w-2],...,x[1],x[o]}截断为一个k位数字时，我们会丢弃高w-k位，得到一个位向量x'= {x[k-1],x[k-2],...,x[1],x[o]}。
截断一个数字可能会改变它的值——溢出的一种形式。对于一个无符号数，我们可以很容易得出其数值结果。
  
 
 
2.3 整数运算
    许多刚入门的程序员非常惊奇地发现，两个正数相加会得出一个负数，而比较表达式x<y和比较表达式x-y<0会产生不同的结果。这些属性是由于计算机运算的有限性造成的。
理解计算机运算的细微之处能够帮助程序员编写更可靠的代码。


2.3.1
    无符号加法

原理:无符号数加法
对满足x>=0,y<2<w>的x和y有:
    x + y[w] = x + y          x+y<2<w>
             = x + y - 2<w>   2<w><= x+y <=2<w-1>
左边的和x+y映射到右边的无符号w位的和x+y<w>。正常情况下x+y的值保持不变，而溢出情况则是该和数减去2<w>的结果。
    
    当执行C程序时，不会将溢出作为错误而发信号。不过有的时候，我们可能希望判定是否发生了溢出。
    原理:检测无符号数加法中的溢出
    对在范围0<=x,  y<UMax[w]中的x和y，令:s=x+y。则对计算s，当且仅当s<x(或者等价地:s<y时，发生了溢出。
    

2.3.2 补码加法/2.3.3 补码的非/2.3.4 无符号乘法/2.3.5 补码乘法/2.3.6 乘以常数/2.3.7 除以2的幂

2.3.8 关于整数运算的最后思考
    正如我们看到的，计算机执行的“整数”运算实际上是一种模运算形式。表示数字的有限字长限制了可能的值的取值范围，结果运算可能溢出。我们还看到，补码表示提供了
一种既能表示负数也能表示正数的灵活方法，同时使用了与执行无符号算术相同的位级实现，这些运算包括像加法、减法、乘法，甚至除法，无论运算数是以无符号形式还是以补
码形式表示的，都有完全一样或者非常类似的位级行为。
    我们看到了C语言中的某些规定可能会产生令人意想不到的结果，而这些结果可能是难以察觉或理解的缺陷的源头。我们特别看到了unsigned数据类型，虽然它概念上很简
单，但可能导致即使是资深程序员都意想不到的行为。我们还看到这种数据类型会以出乎意料的方式出现，比如，当书写整数常数和当调用库函数时。


2.4 浮点数
2.4.1 IEEE浮点表示
    IEEE浮点标准用V=(一1)<s>*M*2<E>的形式来表示一个数:
    .符号((sign)   s决定这数是负数(s=1)还是正数(s=0)，而对于数值。的符号位解释作为特殊情况处理。
    .尾数(significand)M是一个二进制小数，它的范围是1～2-e，或者是0～1-e。
    .阶码(exponent)  E的作用是对浮点数加权，这个权重是2的E次幂(可能是负数)。
将浮点数的位表示划分为三个字段，分别对这些值进行编码:
    一个单独的符号位:直接编码符号、。
    k位的阶码字段exp=ek-1]...e[1]e[0]编码阶码E
    n位小数字段frac= f[n-1]]...f[1]f[0]编码尾数M，但是编码出来的值也依赖于阶码字段的值是否等于0。
   
  
2.5 小结
    计算机将信息编码为位(比特)，通常组织成字节序列。有不同的编码方式用来表示整数、实数和字符串。不同的计算机模型在编码数字和多字节数据中的字节顺序时使用不同的约定。
    c语言的设计可以包容多种不同字长和数字编码的实现。64位字长的机器逐渐普及，并正在取代32位机器。由于64位机器也可以运行为32位机器编译的程序，我们的重点就放在区
分32位和64位程序，而不是机器本身。64位程序的优势是可以突破32位程序具有的4GB地址限制。
    大多数机器对整数使用补码编码，而对浮点数使用IEEE标准754编码。在位级上理解这些编码，并且理解算术运算的数学特性，对于想使编写的程序能在全部数值范围上正确运算的
程序员来说，是很重要的。
    在相同长度的无符号和有符号整数之间进行强制类型转换时，大多数C语言实现遵循的原则是底层的位模式不变。在补码机器上，对于一个w位的值，这种行为是由函数T2U[w]]和
U2T[w]来描述的。C语言隐式的强制类型转换会出现许多程序员无法预计的结果，常常导致程序错误。
    由于编码的长度有限，与传统整数和实数运算相比，计算机运算具有非常不同的属性。当超出表示范围时，有限长度能够引起数值溢出。当浮点数非常接近于0.0，从而转换成零时，
也会下溢。
    和大多数其他程序语言一样，C语言实现的有限整数运算和真实的整数运算相比，有一些特殊的属性。例如，由于溢出，表达式x*x能够得出负数。但是，无符号数和补码的运算都
满足整数运算的许多其他属性，包括结合律、交换律和分配律。这就允许编译器做很多的优化。例如，用((x<<3)-x取代表达式7*x时，我们就利用了结合律、交换律和分配律的属性，
还利用了移位和乘以2的幂之间的关系。
    我们已经看到了几种使用位级运算和算术运算组合的聪明方法。例如，使用补码运算，~x+1等价于-x。另外一个例子，假设我们想要一个形如[0,…，0，1,…，1]的位模式，由w-k个0
后面紧跟着k个1组成。这些位模式有助于掩码运算。这种模式能够通过C表达式(1<<k)-1生成，利用的是这样一个属性，即我们想要的位模式的数值为2<k>一1。例如，表达式(1<<8)-1
将产生位模式0xFF.
    浮点表示通过将数字编码为.x*2<y>的形式来近似地表示实数。最常见的浮点表示方式是由IEEE标准754定义的。它提供了几种不同的精度，最常见的是单精度(32位)和双精度(64位)。
IEEE浮点也能够表示特殊值正负无穷和NaN。
    必须非常小心地使用浮点运算，因为浮点运算只有有限的范围和精度，而且并不遵守普遍的算术属性，比如结合性。







































